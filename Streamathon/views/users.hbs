<!--Hanjun Kim and Christian McKinnon, CS340, 3/15/2024
Code Adapted from CS340 Canvas Module Week 6: Exploration - Web Application Technology and Steps 3 and 7: CS 340 GitHub Guide

Citations:
https://canvas.oregonstate.edu/courses/1946034/pages/exploration-web-application-technology?module_item_id=23809327
https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%203%20-%20Integrating%20a%20Templating%20Engine%20(Handlebars) 
https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%207%20-%20Dynamically%20Deleting%20Data -->

<!-- users.hbs for our Users Entity: Create, Read, Update, and Delete Functionality -->

<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>CS 340: Project Streamathon</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <meta name="robots" content="noindex,noarchive, nofollow" />
    <link rel='stylesheet' type='text/css' media='screen' href='/css/main.css'>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.ico">
</head>
<body>
     <!-- Header for Project Step 6 Final -->
    <header>
        <h1><img src="/favicon.ico" alt="My favicon" style="width: 48px; height: 48px;">&nbsp;Streamathon Database Management System</h1>
    </header>
    <!--A navigation bar with 7 Entities and 1 Homepage-->
    <nav>
        <a href = "index">Home</a>
        <a href = "movies">Movies</a>
        <a href = "users">Users</a>
        <a href = "subscriptions">Subscriptions</a>
        <a href = "subtiers">Subscription Tiers</a>
        <a href = "genres">Genres</a>
        <a href = "ratings">Ratings</a>
        <a href = "movgentable">MoviesGenresTable</a>
    </nav>
    <main>
        <section>
    <head>
    <title>Users</title>
    <script language="JavaScript">
		function showform(dowhat) {
			// There are only 3 actions here as we do not have a separate "DELETE" form
            // We don't show UPDATE on the main page
            if (dowhat == "all") {
                document.getElementById("browse").style.display = "block";
                document.getElementById("insert").style.display = "block";
                document.getElementById("update").style.display = "block";
            } else if (dowhat == "insert") {
                document.getElementById("browse").style.display = "none";
                document.getElementById("insert").style.display = "block";
                document.getElementById("update").style.display = "none";
            } else if (dowhat == "update") {
                document.getElementById("browse").style.display = "none";
                document.getElementById("insert").style.display = "none";
                document.getElementById("update").style.display = "block";
            } else {
                // Otherwise, we simply display options
                document.getElementById("browse").style.display = "block";
                document.getElementById("insert").style.display = "block";
                document.getElementById("update").style.display = "none";
            }
        }
    function newUser() { showform('insert'); }
    function updateUser(newUserID, newFirstName, newLastName, newEmail, newAge) { 
        showform('all');
        document.getElementById("update-user-id").value = newUserID;
        document.getElementById("input-update-firstName").value = newFirstName;
        document.getElementById("input-update-lastName").value = newLastName;
        document.getElementById("input-update-email").value = newEmail;
        document.getElementById("input-update-age").value = newAge;
     }
    function deleteUser(newUserID){ showform ('delete'); }
    function browseUserUser() { showform ('browse'); }
    function showAll() { showform ('all'); }
</script>
</head>

<body onload="browseUserUser()">

<h2>Users Entity</h2>
<h4>(Please use Google Chrome to View)</h4>
    <p> Within the Users entity, a database administrator can ADD, UPDATE, or DELETE a User. 
        Updated User attributes only take place within this entity and so no UPDATE CASCADE is 
        required. When a User is removed from the database, an ON DELETE CASCADE ensures that the 
        corresponding rating is removed.

<!-- UPDATE User -->
<div id="update">
  <legend><h2 style="text-align: center;">Update User</h2>
  <p>This is a form to update an existing User in the above database. The userID 
     is autopopulated based on which "Edit" button is selected from the table above.</p>
    <form id="update-user-form-ajax">
        <fieldset class = "standard-form">
          <input type="hidden" name="update-user-id" id="update-user-id"/>

          <label for="input-update-firstName">First Name: </label>
          <input type="text" name="input-update-firstName" id="input-update-firstName" required>

          <label for="input-update-lastName">Last Name: </label>
          <input type="text" name="input-update-lastName" id="input-update-lastName" required>

          <label for="input-update-email">Email: </label>
          <input type="text" name="input-update-email" id="input-update-email" required>

          <label for="input-update-age">Age: </label>
          <input type="text" name="input-update-age" id="input-update-age">

          <input class="btn" type="submit" id="UpdateSaveUser" value="Update" onClick="browseUserUser()">
          <input class="btn" type="button" value="Cancel" onClick="browseUserUser()">
          </fieldset>
	</form>
    </legend>
<script src="./js/update_user.js"></script> 
</div>
<p></p>

<!-- BROWSE / DELETE -->
<div id="browse">
<table border="1" cellpadding="2", id = "user-table">
  <tr>
    <th colspan="7" style="text-align: center;">Users</th>
    <tr>
            {{#each data.[0]}}
            <th>
                {{@key}}
            </th>
            {{/each}}
            <th>DELETE</th>
            <th>EDIT</th>
        </tr>
  </tr>
  {{#each data}}
  <tr data-value = "{{this.[userID]}}">
  </tr>
   {{!-- Body section --}}
        {{!-- For each row, print the userID, firstName, lastName, email, and age in order --}}
        
            <td>{{this.[userID]}}</td>
            <td>{{this.[firstName]}}</td>
            <td>{{this.[lastName]}}</td>
            <td>{{this.[email]}}</td>
            <td>{{this.[age]}}</td>
            <td><button onclick="deleteUser({{this.[userID]}})">Delete</button></td>
            <td><button onClick='updateUser({{this.[userID]}}, "{{this.[firstName]}}", "{{this.[lastName]}}",
                                            "{{this.[email]}}", "{{this.[age]}}")'>Edit</button></td>
        </tr>
        {{/each}}
</table>
<script src="./js/delete_user.js"></script>

</div> 
<!-- INSERT User -->
<div id="insert">
    <legend><h2 style="text-align: center;">Add User:</h2>
    <p>This is a form to add a new User entry into the database. A user's firstName, lastName, or email cannot be NULL.
        When a new User is added to this entity, that same user will also be added to the Subscriptions entity as well.
    </p>
    <form id="add-user-form">
        <fieldset class = "standard-form">
      <label for="input-firstName">First Name: </label>
      <input type="text" name="input-firstName" id="input-firstName" required>
      
      <label for="input-lastName">Last Name: </label>
      <input type="text" name="input-lastName" id="input-lastName" required>

      <label for="input-email">Email: </label>
      <input type="text" name="input-email" id="input-email" required>

      <label for="input-age">Age: </label>
      <input type="text" name="input-age" id="input-age">
  
          <input class="btn" type="submit" id="addUser" value="Add" onClick="browseUserUser()">
          <input class="btn" type="button" value="Cancel" onClick="browseUserUser()">
    </fieldset>
	</form> 
    </legend>
{{!-- Embed our javascript to handle the DOM manipulation and AJAX request --}}
<script src="./js/add_user.js"></script>
</div>
<p>&nbsp;</p>
</section>
    </main>
<p><br><br><br><br><br></p>
<!-- Copyright of our team as footer -->
<footer>
    <p>
        &copy; 2024 Hanjun Kim & Christian McKinnon (Team AceSync - Group 10) for CS 340
    </p>
</footer>
</body>
</html>