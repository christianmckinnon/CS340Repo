<!--Hanjun Kim and Christian McKinnon, CS340, 3/15/2024 
Code Adapted from CS340 Canvas Module Week 6: Exploration - Web Application Technology and Steps 3 and 7: CS 340 GitHub Guide

Citations:
https://canvas.oregonstate.edu/courses/1946034/pages/exploration-web-application-technology?module_item_id=23809327
https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%203%20-%20Integrating%20a%20Templating%20Engine%20(Handlebars) 
https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%207%20-%20Dynamically%20Deleting%20Data -->

<!-- movgentable.hbs for our MoviesGenresTable Entity: Create and Read Functionality -->

<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>CS 340: Project Streamathon</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <meta name="robots" content="noindex,noarchive, nofollow" />
    <link rel='stylesheet' type='text/css' media='screen' href='/css/main.css'>
    <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">

</head>
<body>
     <!-- Header for Project Step 6 Final -->
    <header>
        <h1>Streamathon Database Management System</h1>
    </header>
    <!--A navigation bar with 7 Entities and 1 Homepage-->
    <nav>
        <a href = "index">Home</a>
        <a href = "movies">Movies</a>
        <a href = "users">Users</a>
        <a href = "subscriptions">Subscriptions</a>
        <a href = "subtiers">Subscription Tiers</a>
        <a href = "genres">Genres</a>
        <a href = "ratings">Ratings</a>
        <a href = "movgentable">MoviesGenresTable</a>
    </nav>
    <main>
    <section>
     <head>
    <title>MoviesGenresTable</title>
    <script language="JavaScript">
		function showform(dowhat) {
			// There are only 3 actions here: CREATE, READ, and UPDATE
            // We don't show UPDATE on the main page
            if (dowhat == "all") {
                document.getElementById("browse").style.display = "block";
                document.getElementById("insert").style.display = "block";
                document.getElementById("update").style.display = "block";
            } else if (dowhat == "insert") {
                document.getElementById("browse").style.display = "none";
                document.getElementById("insert").style.display = "block";
                document.getElementById("update").style.display = "none";
            } else if (dowhat == "update") {
                document.getElementById("browse").style.display = "none";
                document.getElementById("insert").style.display = "none";
                document.getElementById("update").style.display = "block";
            } else {
                // Otherwise, we simply display options
                document.getElementById("browse").style.display = "block";
                document.getElementById("insert").style.display = "block";
                document.getElementById("update").style.display = "none";
            }
        }
    function newMovieGenre() { showform('insert'); }
    function updateMovieGenre(newMovieTitle) { 
        showform('all');
        document.getElementById("input-update-movie-id").value = newMovieTitle;
    }
        
    function browseMovieGenre() { showform ('browse'); }
    function showAll() { showform ('all'); }
</script>
</head>
<body onload="browseMovieGenre()">

<h2>MoviesGenres Intersection Table</h2>
        <!--The following is our table with example data for the MoviesGenresTable Intersection Table-->
        <p> This Intersection Table represents the M:N relationship between the Movies and Genres Entities. 
            Movies and their corresponding Genres can be <strong>added</strong> and <strong>updated</strong> on this page. 
            When a Movie is deleted on the Movies page, the corresponding row with the same Movie (movieID) and Genre 
            (genreID) will be removed from this table as well (nothing here should be NULL).
        </p>

<!-- UPDATE MoviesGenresTable -->
<div id="update">
  <legend><h2 style="text-align: center;">Update MovieGenre</h2>
  <p> A form to update an existing movie entry's Genre in the database. This is particularly helpful 
    if a database administrator accidentally selects the incorrect Genre when adding an entry to the table.
  </p>
    <form id="update-movie-genre-form-ajax">
         <fieldset class = "standard-form">
        <label for="input-update-movie-id">Movie Title: </label>
        <input type="text" class="hidden" name="input-update-movie-id" id="input-update-movie-id" readonly="readonly" disabled>

        <label for="input-update-genre-id">Genre Type: </label>
        <select name="input-update-genre-id" id="input-update-genre-id">
            <option value="test">Select a genre</option>
            {{#each genres}}
                <option value="{{this.genreType}}">{{this.genreType}}</option>
            {{/each}}
            </select>
        
        <input class="btn" type="submit" id="UpdateSaveMovieGenre" value="Update" onClick="browseMovieGenre()">
        <input class="btn" type="button" value="Cancel" onClick="browseMovieGenre()">
          </fieldset>
	</form>
    </legend>
    <p></p>
<script src="./js/update_moviegenre.js"></script> 
</div>

<!-- BROWSE -->
<div id="browse">
<table border="1" cellpadding="2", id = "movie-genre-table">
  <tr>
    <th colspan="3" style="text-align: center;">MoviesGenresTable</th>
    </tr>
    <tr>
        {{#each data.[0]}}
        <th>
            {{@key}}
        </th>
        {{/each}}
        <th>EDIT</th>
  </tr>
  {{#each data}}
  <tr data-value = "{{this.[movieTitle]}}">

   {{!-- Body section --}}
        {{!-- For each row, print the movieID, genreType, and price in order --}}
            <td>{{this.[movieTitle]}}</td>
            <td>{{this.[movieGenre]}}</td>
            <td><button class="updateMovieGenreButton" onClick='updateMovieGenre("{{this.[movieTitle]}}")'>Edit</button></td>
        </tr>
        {{/each}}
</table>
<p></p>
</div> 

<!-- INSERT MovieGenre -->
<div id="insert">
    <legend><h2 h2 style="text-align: center;">Add MovieGenre Entry:</h2>
    <p> A form to add a new entry to the MoviesGenres Intersection Table. <br><strong>Users can only add
        a new entry if a Movie does not already have a corresponding Genre.</strong> (Nothing here can be NULL). </p> 
    <form id="add-movie-genre-form">
        <fieldset class = "standard-form">
        <label for="input-moviegen">Movie: </label>
        <select name="input-moviegen" id="input-moviegen">
            <option value="test">Select Title</option>
            {{#each movies}}
                <option value="{{this.title}}">{{this.title}}</option>
            {{/each}}
            </select>

        <label for="input-genmovie">Genre: </label>
        <select name="input-genmovie" id="input-genmovie">
            <option value="test">Select Genre</option>
            {{#each genres}}
                <option value="{{this.genreType}}">{{this.genreType}}</option>
            {{/each}}
            </select>
      
          <input class="btn" type="submit" id="addMovieGenre" value="Add" onClick="browseMovieGenre()">
          <input class="btn" type="button" value="Cancel" onClick="browseMovieGenre()">
    </fieldset>
	</form> 
    </legend>
<script src="./js/add_moviegen.js"></script>
</div>
<p></p>
</div>
</section>
    </main>
<p><br><br><br><br><br><br></p>
<!-- Copyright of our team as footer -->
<footer>
    <p>
        &copy; 2024 Hanjun Kim & Christian McKinnon (Team AceSync - Group 10) for CS 340
    </p>
</footer>
</body>
</html>